"""""Create doctors and appointments tables

Revision ID: 1b1cac9b9489
Revises: e8c28675c883
Create Date: 2024-06-08 11:36:23.856604

""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '1b1cac9b9489'
down_revision = 'e8c28675c883'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('order')
    op.drop_table('order_item')
    op.drop_table('product')
    with op.batch_alter_table('Doctors', schema=None) as batch_op:
        batch_op.alter_column('gender',
               existing_type=mysql.CHAR(length=1),
               type_=sa.String(length=1),
               existing_nullable=False)

    with op.batch_alter_table('Users', schema=None) as batch_op:
        batch_op.alter_column('gender',
               existing_type=mysql.CHAR(length=1),
               type_=sa.String(length=1),
               existing_nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('Users', schema=None) as batch_op:
        batch_op.alter_column('gender',
               existing_type=sa.String(length=1),
               type_=mysql.CHAR(length=1),
               existing_nullable=False)

    with op.batch_alter_table('Doctors', schema=None) as batch_op:
        batch_op.alter_column('gender',
               existing_type=sa.String(length=1),
               type_=mysql.CHAR(length=1),
               existing_nullable=False)

    op.create_table('product',
    sa.Column('product_id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('seller_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product_name', mysql.VARCHAR(length=100), nullable=False),
    sa.Column('description', mysql.TEXT(), nullable=True),
    sa.Column('price', mysql.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('stock', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date_added', mysql.DATETIME(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('image', mysql.LONGBLOB(), nullable=True),
    sa.ForeignKeyConstraint(['seller_id'], ['Users.user_id'], name='product_ibfk_1'),
    sa.PrimaryKeyConstraint('product_id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_table('order_item',
    sa.Column('order_item_id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('order_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('price', mysql.DECIMAL(precision=10, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['order.order_id'], name='order_item_ibfk_1'),
    sa.ForeignKeyConstraint(['product_id'], ['product.product_id'], name='order_item_ibfk_2'),
    sa.PrimaryKeyConstraint('order_item_id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_table('order',
    sa.Column('order_id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('buyer_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('order_date', mysql.DATETIME(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('total_amount', mysql.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('status', mysql.VARCHAR(length=50), nullable=True),
    sa.ForeignKeyConstraint(['buyer_id'], ['Users.user_id'], name='order_ibfk_1'),
    sa.PrimaryKeyConstraint('order_id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    # ### end Alembic commands ###
"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '1b1cac9b9489'
down_revision = 'e8c28675c883'
branch_labels = None
depends_on = None


def upgrade():
    # Create the new tables without dropping any existing tables
    op.create_table('Doctors',
        sa.Column('doctor_id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('username', sa.String(length=50), nullable=False),
        sa.Column('email', sa.String(length=100), nullable=False),
        sa.Column('password', sa.String(length=255), nullable=False),
        sa.Column('date_of_birth', sa.Date(), nullable=False),
        sa.Column('gender', sa.String(length=1), nullable=False),
        sa.Column('address', sa.String(length=255)),
        sa.Column('phone_number', sa.String(length=15)),
        sa.Column('profile_picture', sa.LargeBinary),
        sa.PrimaryKeyConstraint('doctor_id'),
        sa.UniqueConstraint('email')
    )

    op.create_table('Doctor_Appointments',
        sa.Column('appointment_id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('patient_id', sa.Integer(), nullable=False),
        sa.Column('doctor_id', sa.Integer(), nullable=False),
        sa.Column('service_type', sa.String(length=100)),
        sa.Column('date_time', sa.DateTime(), nullable=False),
        sa.Column('status', sa.String(length=50)),
        sa.ForeignKeyConstraint(['patient_id'], ['Users.user_id']),
        sa.ForeignKeyConstraint(['doctor_id'], ['Doctors.doctor_id']),
        sa.PrimaryKeyConstraint('appointment_id')
    )

    # Alter existing tables
    with op.batch_alter_table('Doctors', schema=None) as batch_op:
        batch_op.alter_column('gender',
               existing_type=mysql.CHAR(length=1),
               type_=sa.String(length=1),
               existing_nullable=False)

    with op.batch_alter_table('Users', schema=None) as batch_op:
        batch_op.alter_column('gender',
               existing_type=mysql.CHAR(length=1),
               type_=sa.String(length=1),
               existing_nullable=False)


def downgrade():
    # Only drop the new tables if they exist
    op.drop_table('Doctor_Appointments')
    op.drop_table('Doctors')

    # Revert alterations to existing tables
    with op.batch_alter_table('Users', schema=None) as batch_op:
        batch_op.alter_column('gender',
               existing_type=sa.String(length=1),
               type_=mysql.CHAR(length=1),
               existing_nullable=False)

    with op.batch_alter_table('Doctors', schema=None) as batch_op:
        batch_op.alter_column('gender',
               existing_type=sa.String(length=1),
               type_=mysql.CHAR(length=1),
               existing_nullable=False)
